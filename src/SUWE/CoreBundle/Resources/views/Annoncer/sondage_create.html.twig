{% extends 'base.html.twig' %}
{% block body %}
    {{ form_start(form) }}
    <div class="row justify-content-space-between">
        <div class="col-12 col-md-8 offset-md-2" :class="{isFuckingGone: !part_1}">
            <h1 class="text-center">Création de sondage -
                <small>Cible</small>
            </h1>
            <hr style="margin-top: 40px;margin-bottom: 40px;">
            <div class="row form-group">
                <div class="col-12">
                    <label> {{ form_label(form.title) }}</label>
                    {{ form_widget(form.title, {'attr': {'v-model' : 'title', 'maxlength':'50', 'value': null}}) }}
                </div>
                <div class="col-6" style="margin-top: 20px;">
                    <label> {{ form_label(form.nbQuestions) }}</label>
                    <div class="input-group">
                        <span class="input-group-addon">?</span>
                        {{ form_widget(form.nbQuestions) }}
                    </div>
                </div>
                <div class="col-6" style="margin-top: 20px;">
                    <label> {{ form_label(form.maxBudget) }}</label>
                    <div class="input-group">
                        <span class="input-group-addon">$</span>
                        {{ form_widget(form.maxBudget, {'attr': {'v-model' : 'maxBudget', 'value': null}}) }}
                    </div>
                </div>
                <div class="col-12">
                    <hr style="margin-top: 40px;margin-bottom: 40px;">
                </div>
                <div class="col-6">
                    <label> {{ form_label(form.minAge) }}</label>
                    {{ form_widget(form.minAge, {'attr': {'v-model' : 'minAge', 'value': null}}) }}
                </div>
                <div class="col-6">
                    <label> {{ form_label(form.maxAge) }}</label>
                    {{ form_widget(form.maxAge, {'attr': {'v-model' : 'maxAge', 'value': null}}) }}
                </div>
                <div class="col-12 col-sm-4">
                    <h3>Départements</h3>
                    <ul v-if="departementsSelected.length > 0">
                        <li v-for="departement in departementsSelected">${departement}</li>
                    </ul>
                    <a class="btn btn-success" data-toggle="modal" data-target="#depModal">Selectionner
                    </a>
                </div>
                <div class="col-12 col-sm-4">
                    <h3>Situation</h3>
                    <ul v-if="situations.length > 0">
                        <li v-for="situation in situationsSelected">${situation}</li>
                    </ul>
                    <a class="btn btn-success" data-toggle="modal" data-target="#situationModal">
                        Selectionner
                    </a>
                </div>
                <div class="col-12 col-sm-4">
                    <h3 class="">Centre d'intérêt</h3>
                    <ul v-if="hobbiesSelected.length > 0">
                        <li v-for="hobby in hobbiesSelected">${hobby}</li>
                    </ul>
                    <a class="btn btn-success " data-toggle="modal" data-target="#hobbyModal">
                        Selectionner
                    </a>
                </div>

            </div>
            <div class="col-12 text-center">
                <div class="form-group">
                    <a class="btn btn-success" @Click="part_1 = false">Confirmer et créer les questions</a>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-8 offset-md-2" :class="{isFuckingGone: part_1 }">
            <h1 class="text-center">Création de sondage -
                <small>Questions</small>
            </h1>
            <hr>
            <div class="row form-group" v-for="(question, index) in questions">
                <div class="col-12" :id="'q-'+index">
                    <label>Question ${index+1}</label>
                    <input class="form-control" :name="'q-'+index+'-intitule'" type="text">
                    <label for="sel1">Type de question</label>
                    <select class="form-control questionType">
                        <option>Binaire</option>
                        <option>Réponses Mutliples</option>
                        <option>Réponses Unique</option>
                    </select>
                    <hr style="width:50%">
                    {#BINARY#}
                    <div class="input-group row text-center" v-if="question.type === 'binary'">
                        <label for="">
                            Oui
                            <input type="checkbox">
                        </label>
                        <label for="">
                            Non
                            <input type="checkbox">
                        </label>
                        <label for="">
                            Autre
                            <input type="checkbox">
                        </label>
                    </div>
                    {#SINGLE#}
                    <div class="input-group row" v-if="question.type === 'single' ||question.type === 'multiple' ">
                        <div class="col-12">
                            <input type="text" class="form-control" :name="'q-'+index+'-response-1'">
                        </div>
                    </div>
                    <input class="d-none" :id="'q-'+index+'-type'" :name="'q-'+index+'-type'">
                </div>
            </div>
            <div class="text-center">
                <button type="submit" @Click="submitForm" class="text-center btn btn-success">Valider le formulaire
                </button>
            </div>
        </div>
    </div>

    {#MODAL TIME#}

    {#Modal département#}
    <div class="modal fade" id="depModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-3" v-for="departement in departements">
                            <label for="">
                                ${departement}
                                <input type="checkbox" aria-label="..." @Click="addStuff('dep', departement)">
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Sauvegarder</button>
                </div>
            </div>
        </div>
    </div>

    {#Modal situation pro#}
    <div class="modal fade" id="situationModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-4" v-for="situation in situations">
                            <label for="">
                                ${situation}
                                <input type="checkbox" aria-label="..." @Click="addStuff('situation', situation)">
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Sauvegarder</button>
                </div>
            </div>
        </div>
    </div>

    {#Modal hobbies#}
    <div class="modal fade" id="hobbyModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-4" v-for="hobby in hobbies">
                            <label for="">
                                ${hobby}
                                <input type="checkbox" aria-label="..." @Click="addStuff('hobby', hobby)">
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Sauvegarder</button>
                </div>
            </div>
        </div>
    </div>
    <div class="d-none">
        {{ form_rest(form) }}
    </div>
    {{ form_end(form) }}
{% endblock %}

    {% block javascripts %}
        {{ parent() }}

        <script>
            var form = new Vue({
                delimiters: ['${', '}'],
                el: '#sondage_form',
                data: {
                    part_1: true,
                    title: '',
                    maxBudget: '',
                    minAge: 0,
                    maxAge: 99,
                    departements: [],
                    departementsSelected: [],
                    situations: [
                        'Sans emploi',
                        'Etudiant',
                        'Retraité',
                        'Employé'
                    ],
                    situationsSelected: [],
                    hobbies: [
                        'Lecture',
                        'Jeux-vidéos',
                        'Activité maritime',
                        'Jardinage',
                        'Shopping',
                        'Cuisine'
                    ],
                    hobbiesSelected: [],
                    nbQuestions: 0,
                    questions: []
                },
                watch: {
                    part_1: function (nextValue) {
                        if (nextValue === false) {
                            for (var i = 0; i < this.nbQuestions; i++) {
                                this.questions.push({
                                    type: 'binary',
                                    intitule: ''
                                })
                            }
                        }

                        setTimeout(function () {
                            $('.questionType').change(function (e) {
                                var newType = e.target.value;
                                var parent = e.target.parentNode;
                                var inputsToReplace = $(parent).find('.input-group');
                                var questionId = parent.id.split('-')[1];

                                $(parent).find("#q-" + questionId + "-type")[0].value = newType;
                                console.log($(parent).find("#q-" + questionId + "-type"));

                                var binaryNodes = '<label for=""> Oui <input type="checkbox"> </label> <label for=""> Non <input type="checkbox"> </label> <label for=""> Autre <input type="checkbox"> </label>';
                                var multipleAndSimpleNodes = $('<input type="text" class="form-control" style="display: block;width: 100%; padding:1rem 0">');

                                multipleAndSimpleNodes[0]['name'] = "q-" + questionId + "-response-1";

                                var button = $("<a class='btn btn-primary btn-lg btn-block'>Ajouter une réponse +</a>");
                                button[0]['id'] = questionId;
                                button[0].onclick = function () {
                                    var divToAdd = $('#q-' + questionId).find('.input-group')[0];
                                    var resId = divToAdd.childNodes.length;
                                    var newNode = $('<input type="text" class="form-control" style="display: block;width: 100%; padding:1rem 0">');

                                    newNode[0]['name'] = "q-" + questionId + "-response-" + resId;
                                    divToAdd.prepend(newNode[0]);
                                }


                                switch (newType) {
                                    case 'Binaire':
                                        inputsToReplace[0].innerHTML = binaryNodes;
                                        break;
                                    case 'Réponses Mutliples':
                                        $(inputsToReplace[0]).empty().append(multipleAndSimpleNodes[0]);
                                        inputsToReplace[0].appendChild(button[0]);
                                        break;
                                    case 'Réponses Unique':
                                        $(inputsToReplace[0]).empty().append(multipleAndSimpleNodes[0]);
                                        inputsToReplace[0].appendChild(button[0]);
                                        break;
                                }
                            }.bind(this))
                        }.bind(this), 500);
                    }
                },
                methods: {
                    addStuff: function (type, data) {

                        function filterArray(arr, itemToFilter) {
                            return arr.filter(function (value) {
                                return value !== itemToFilter;
                            })
                        }

                        switch (type) {
                            case 'dep':
                                if (this.departementsSelected.includes(data)) this.departementsSelected = filterArray(this.departementsSelected, data);
                                else this.departementsSelected.push(data);
                                break;
                            case 'hobby':
                                console.log(this.hobbiesSelected[data]);
                                if (this.hobbiesSelected.includes(data)) this.hobbiesSelected = filterArray(this.hobbiesSelected, data);
                                else this.hobbiesSelected.push(data);
                                break;
                            case 'situation':
                                if (this.situationsSelected.includes(data)) this.situationsSelected = filterArray(this.situationsSelected, data);
                                else this.situationsSelected.push(data);
                                break;
                        }

                    },
                    submitForm: function () {
                        console.log('LAUCNHED');
                        $('#sondage_form').submit();
                    },
                    addResponse: function (id) {

                    }
                },
                mounted: function () {
                    this.nbQuestions = Number($('#sondage_create_nbQuestions')[0].options[0].innerText);
                    $('#sondage_create_nbQuestions').on('change', function (event) {
                        form.$data.nbQuestions = event.target.options[event.target.value].innerText;
                    })
                }
            });

            function addResponse(id) {
                var divToAdd = $('#q-' + id).find('.input-group')[0];
                console.log(divToAdd);
            }

            const nbDep = 95;
            for (var i = 0; i < nbDep; i++) {
                form.$data.departements.push(String(i))
            }
        </script>
    {% endblock %}